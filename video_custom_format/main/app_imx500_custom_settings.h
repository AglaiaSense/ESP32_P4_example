/*
 * SPDX-FileCopyrightText: 2024 Espressif Systems (Shanghai) CO LTD
 *
 * SPDX-License-Identifier: ESPRESSIF MIT
 */

#pragma once

#include "esp_cam_sensor_types.h"
#include "imx500_types.h"
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Custom register list */
static const imx500_reginfo_t imx500_input_MIPI_2lane_2028x1520_regs[] = {
        {0x0112, 0x0a },
        {0x0113, 0x0a },
        {0x0114, 0x01 },
        {0x0342, 0x24 },
        {0x0343, 0xb6 },
        {0x0340, 0x0b },
        {0x0341, 0x9c },
        {0x3210, 0x00 },
        {0x0344, 0x00 },
        {0x0345, 0x00 },
        {0x0346, 0x00 },
        {0x0347, 0x00 },
        {0x0348, 0x0f },
        {0x0349, 0xd7 },
        {0x0350, 0x00 },
        {0x034a, 0x0b },
        {0x034b, 0xdf },
        {0x3f58, 0x01 },
        {0x0381, 0x01 },
        {0x0383, 0x01 },
        {0x0385, 0x01 },
        {0x0387, 0x01 },
        {0x0900, 0x01 },
        {0x0901, 0x22 },
        {0x0902, 0x02 },
        {0x3241, 0x11 },
        {0x3242, 0x01 },
        {0x3250, 0x03 },
        {0x3f0f, 0x00 },
        {0x3f40, 0x00 },
        {0x3f41, 0x00 },
        {0x3f42, 0x00 },
        {0x3f43, 0x00 },
        {0xb34e, 0x00 },
        {0xb351, 0x20 },
        {0xb35c, 0x00 },
        {0xb35e, 0x08 },
        {0x0401, 0x00 },
        {0x0404, 0x00 },
        {0x0405, 0x10 },
        {0x0408, 0x00 },
        {0x0409, 0x00 },
        {0x040a, 0x00 },
        {0x040b, 0x00 },
        {0x040c, 0x07 },
        {0x040d, 0xec },
        {0x040e, 0x05 },
        {0x040f, 0xf0 },
        {0x034c, 0x07 },
        {0x034d, 0xec },
        {0x034e, 0x05 },
        {0x034f, 0xf0 },
        {0x0301, 0x05 },
        {0x0303, 0x02 },
        {0x0307, 0x9b },
        {0x0309, 0x0a },
        {0x030b, 0x01 },
        {0x030f, 0x4a },
        {0x0310, 0x01 },
        {0x0820, 0x07 },
        {0x0821, 0xce },
        {0x0822, 0x00 },
        {0x0823, 0x00 },
        {0x3e20, 0x01 },
        {0x3e35, 0x01 },
        {0x3e36, 0x01 },
        {0x3e37, 0x00 },
        {0x3e3a, 0x01 },
        {0x3e3b, 0x00 },
        {0x00e3, 0x00 },
        {0x00e4, 0x00 },
        {0x00e6, 0x00 },
        {0x00e7, 0x00 },
        {0x00e8, 0x00 },
        {0x00e9, 0x00 },
        {0x3f50, 0x00 },
        {0x3f56, 0x01 },
        {0x3f57, 0x30 },
        {0x3606, 0x01 },
        {0x3607, 0x01 },
        {0x3f26, 0x00 },
        {0x3f4a, 0x00 },
        {0x3f4b, 0x00 },
        {0x4bc0, 0x16 },
        {0x7ba8, 0x00 },
        {0x7ba9, 0x00 },
        {0x886b, 0x00 },
        {0x579a, 0x00 },
        {0x579b, 0x0a },
        {0x579c, 0x01 },
        {0x579d, 0x2a },
        {0x57ac, 0x00 },
        {0x57ad, 0x00 },
        {0x57ae, 0x00 },
        {0x57af, 0x81 },
        {0x57be, 0x00 },
        {0x57bf, 0x00 },
        {0x57c0, 0x00 },
        {0x57c1, 0x81 },
        {0x57d0, 0x00 },
        {0x57d1, 0x00 },
        {0x57d2, 0x00 },
        {0x57d3, 0x81 },
        {0x5324, 0x00 },
        {0x5325, 0x31 },
        {0x5326, 0x00 },
        {0x5327, 0x60 },
        {0xbca7, 0x08 },
        {0x5fcc, 0x1e },
        {0x5fd7, 0x1e },
        {0x5fe2, 0x1e },
        {0x5fed, 0x1e },
        {0x5ff8, 0x1e },
        {0x6003, 0x1e },
        {0x5d0b, 0x02 },
        {0x6f6d, 0x01 },
        {0x61c9, 0x68 },
        {0x5352, 0x00 },
        {0x5353, 0x3f },
        {0x5356, 0x00 },
        {0x5357, 0x1c },
        {0x5358, 0x00 },
        {0x5359, 0x3d },
        {0x535c, 0x00 },
        {0x535d, 0xa6 },
        {0x6187, 0x1d },
        {0x6189, 0x1d },
        {0x618b, 0x1d },
        {0x618d, 0x23 },
        {0x618f, 0x23 },
        {0x5414, 0x01 },
        {0x5415, 0x12 },
        {0xbca8, 0x00 },
        {0x5fcf, 0x28 },
        {0x5fda, 0x2d },
        {0x5fe5, 0x2d },
        {0x5ff0, 0x2d },
        {0x5ffb, 0x2d },
        {0x6006, 0x2d },
        {0x616e, 0x04 },
        {0x616f, 0x04 },
        {0x6170, 0x04 },
        {0x6171, 0x06 },
        {0x6172, 0x06 },
        {0x6173, 0x0c },
        {0x6174, 0x0c },
        {0x6175, 0x0c },
        {0x6176, 0x00 },
        {0x6177, 0x10 },
        {0x6178, 0x00 },
        {0x6179, 0x1a },
        {0x617a, 0x00 },
        {0x617b, 0x1a },
        {0x617c, 0x00 },
        {0x617d, 0x27 },
        {0x617e, 0x00 },
        {0x617f, 0x27 },
        {0x6180, 0x00 },
        {0x6181, 0x44 },
        {0x6182, 0x00 },
        {0x6183, 0x44 },
        {0x6184, 0x00 },
        {0x6185, 0x44 },
        {0x5dfc, 0x0a },
        {0x5e00, 0x0a },
        {0x5e04, 0x0a },
        {0x5e08, 0x0a },
        {0x5dfd, 0x0a },
        {0x5e01, 0x0a },
        {0x5e05, 0x0a },
        {0x5e09, 0x0a },
        {0x5dfe, 0x0a },
        {0x5e02, 0x0a },
        {0x5e06, 0x0a },
        {0x5e0a, 0x0a },
        {0x5dff, 0x0a },
        {0x5e03, 0x0a },
        {0x5e07, 0x0a },
        {0x5e0b, 0x0a },
        {0x5dec, 0x12 },
        {0x5df0, 0x12 },
        {0x5df4, 0x21 },
        {0x5df8, 0x31 },
        {0x5ded, 0x12 },
        {0x5df1, 0x12 },
        {0x5df5, 0x21 },
        {0x5df9, 0x31 },
        {0x5dee, 0x12 },
        {0x5df2, 0x12 },
        {0x5df6, 0x21 },
        {0x5dfa, 0x31 },
        {0x5def, 0x12 },
        {0x5df3, 0x12 },
        {0x5df7, 0x21 },
        {0x5dfb, 0x31 },
        {0x5ddc, 0x0d },
        {0x5de0, 0x0d },
        {0x5de4, 0x0d },
        {0x5de8, 0x0d },
        {0x5ddd, 0x0d },
        {0x5de1, 0x0d },
        {0x5de5, 0x0d },
        {0x5de9, 0x0d },
        {0x5dde, 0x0d },
        {0x5de2, 0x0d },
        {0x5de6, 0x0d },
        {0x5dea, 0x0d },
        {0x5ddf, 0x0d },
        {0x5de3, 0x0d },
        {0x5de7, 0x0d },
        {0x5deb, 0x0d },
        {0x5dcc, 0x55 },
        {0x5dd0, 0x50 },
        {0x5dd4, 0x4b },
        {0x5dd8, 0x4b },
        {0x5dcd, 0x55 },
        {0x5dd1, 0x50 },
        {0x5dd5, 0x4b },
        {0x5dd9, 0x4b },
        {0x5dce, 0x55 },
        {0x5dd2, 0x50 },
        {0x5dd6, 0x4b },
        {0x5dda, 0x4b },
        {0x5dcf, 0x55 },
        {0x5dd3, 0x50 },
        {0x5dd7, 0x4b },
        {0x5ddb, 0x4b },
        {0x0202, 0x0b },
        {0x0203, 0x86 },
        {0x0204, 0x00 },
        {0x0205, 0x00 },
        {0x020e, 0x01 },
        {0x020f, 0x00 },
        {0x0210, 0x01 },
        {0x0211, 0x00 },
        {0x0212, 0x01 },
        {0x0213, 0x00 },
        {0x0214, 0x01 },
        {0x0215, 0x00 },
        {0xffff, 0x00 },
    };

    static imx500_reginfo_t imx501_2028x1520_crop_60fps[] = {
        // Power on sequence
        {0x0004, 0x00},
        {0x0007, 0x80},
        {0x0007, 0x00},
        {0x0005, 0x01},
        {0x0004, 0x01},
        {0x0004, 0x03},
        {0x0004, 0x07},
        {0x0005, 0x12},
        // {IMX501_TABLE_WAIT_MS, IMX501_WAIT_MS_STREAM},
        // common register
        {0xA700, 0x01},
        {0x0136, 0x1B},
        {0x0137, 0x00},
        {0x0305, 0x02},
        {0x0306, 0x00},
        {0x0307, 0x9B},
        {0x030D, 0x02},
        {0x030E, 0x00},
        {0x030F, 0x9B},
        {0x0340, 0x18},
        {0x0341, 0x2C},
        {0x0820, 0x10},
        {0x0821, 0x59},
        {0x0822, 0x00},
        {0x0823, 0x00},
        {0x3607, 0x01},
        {0x3E34, 0x00},
        {0x3E35, 0x01},
        {0x3E36, 0x01},
        {0x3E37, 0x00},
        {0x3E38, 0x01},
        {0x3E39, 0x01},
        {0x3E3A, 0x01},
        {0x3E3B, 0x00},
        {0x3F56, 0x00},
        {0x3F57, 0xCA},
        {0x4BC0, 0x16},
        {0x7BA8, 0x00},
        {0x7BA9, 0x00},
        {0x886B, 0x00},
        {0x0342, 0x23},
        {0x0343, 0x40},
        {0x0114, 0x01},
        {0x0202, 0x11},
        {0x0203, 0x94},
        {0x0204, 0x03},
        {0x0205, 0x56},
        {0xBCF1, 0x02},
        // H2V2 Binning
        {0x0342, 0x16},   // Line Length: 5762
        {0x0343, 0x28},
        {0x3F56, 0x00},
        {0x3F57, 0xB8},
        {0x0340, 0x39},   // Frame Length:14772
        {0x0341, 0xB4},
        {0x0900, 0x01},
        {0x0901, 0x22},
        {0x034C, 0x07},
        {0x034D, 0xEC},
        {0x034E, 0x05},
        {0x034F, 0xF0},
        {0x040C, 0x07},
        {0x040D, 0xEC},
        {0x040E, 0x05},
        {0x040F, 0xF0},
        {0xffff, 0x00}
    };
    

/* 如果你想使用底板的ISP，请提供ISP信息 */
static const esp_cam_sensor_isp_info_t imx500_fmt_isp_info = {
    .isp_v1_info = {
        .version = SENSOR_ISP_INFO_VERSION_DEFAULT, // ISP信息版本  9398
        .pclk =  744000000,                           // 像素时钟频率
        .vts = 2028,                                // 垂直总尺寸
        .hts = 1520,                                 // 水平总尺寸
        .bayer_type = ESP_CAM_SENSOR_BAYER_GBRG,    // Bayer格式类型
    }};

    /* 如果你想使用底板的ISP，请提供ISP信息 */
static const esp_cam_sensor_isp_info_t imx500_fmt_isp_60_fps = {
    .isp_v1_info = {
        .version = SENSOR_ISP_INFO_VERSION_DEFAULT, // ISP信息版本  9398
        .pclk =  744000000,                           // 像素时钟频率
        .vts = 2028,                                // 垂直总尺寸
        .hts = 1520,                                 // 水平总尺寸
        .bayer_type = ESP_CAM_SENSOR_BAYER_GBRG,    // Bayer格式类型
    }};


/* 提供初始化列表的描述。
 * 注意，格式的描述必须是`static const`类型 */
static const esp_cam_sensor_format_t custom_format_info = {
    .name = "MIPI_2lane_24Minput_RAW8_2028x1520_56fps",                        // 格式名称
    .format = ESP_CAM_SENSOR_PIXFORMAT_RAW10,                                 // 像素格式
    .port = ESP_CAM_SENSOR_MIPI_CSI,                                         // 传感器接口类型
    .xclk = 24000000,                                                        // 外部时钟频率
    .width = 2028,                                                            // 图像宽度
    .height = 1520,                                                           // 图像高度
    .regs = imx501_2028x1520_crop_60fps,                  // 寄存器配置数组
    .regs_size = ARRAY_SIZE(imx501_2028x1520_crop_60fps), // 寄存器配置数组大小
    .fps = 56,                                                               // 帧率
    .isp_info = &imx500_fmt_isp_60_fps,                                        // ISP信息指针
    .mipi_info = {
        .mipi_clk = (100000000ULL * 4), // MIPI时钟频率
        .lane_num = 2,                  // MIPI通道数
        .line_sync_en = true,           // 行同步使能
    },
    .reserved = NULL, // 保留字段
};
#ifdef __cplusplus
}
#endif
